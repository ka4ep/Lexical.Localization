<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Diagnostics" #>
<#@ output extension=".cs" #>
<#
    string dir = Path.GetDirectoryName(Host.TemplateFile);
    string srcDir = dir; //Path.Combine(dir, "..", "..", "LocalizationKey");
    string srcFilename = Path.Combine(srcDir, "LocalizationRoot.cs");
    string srcCode = File.ReadAllText(srcFilename);
    srcCode = GetRegion(srcCode, "Code");
    srcCode = Regex.Replace(srcCode, "([^I])LocalizationKey", m => m.Groups[1].Value + "StringLocalizerKey");
    srcCode = Regex.Replace(srcCode, "([^I])LocalizationRoot", m => m.Groups[1].Value + "StringLocalizerRoot");
#>
// --------------------------------------------------------
// Copyright:      Toni Kalajainen
// Date:           9.10.2018
// Url:            http://lexical.fi
// --------------------------------------------------------
using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Lexical.Localization;

namespace Lexical.Localization
{
    using Microsoft.Extensions.Localization;

    /// <summary>
    /// StringLocalizerRoot implements and is assignable to:
    ///     <see cref="IStringLocalizer"/>
    ///     <see cref="IStringLocalizerFactory"/>
    ///     <see cref="ILocalizationKey"/>
    ///     <see cref="ILocalizationRoot"/>
    /// </summary>
    [Serializable]
    [DebuggerDisplay("{DebugPrint()}")]
    public partial class StringLocalizerRoot :
        StringLocalizerKey,
        IAssetRoot, ILocalizationKey, ILocalizationKeyCulturePolicyAssigned, IAssetKeyAssetAssigned,
        IStringLocalizer, IStringLocalizerFactory
    {
<#= srcCode #>
     
    }
}
<#+
        /// <summary>
        /// Searches text for a region.
        /// </summary>
        /// <param name="text"></param>
        /// <param name="regionName"></param>
        /// <returns>region or ""</returns>
        static string GetRegion(string text, string regionName)
        {
            Regex rex = new Regex(@"#region\s*"+regionName+@"\s*\r?\n\r?(?<region>.*?)\r?\n\s*#endregion\s*"+regionName+@"\s*\r?\n", RegexOptions.Singleline);
            Match match = rex.Match(text);
            return match.Groups[1].Value;
        }
#>