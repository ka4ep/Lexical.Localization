<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    HashSet<string> visited = new HashSet<string>();
#>
// --------------------------------------------------------
// Copyright:      Toni Kalajainen
// Date:           11.5.2019
// Url:            http://lexical.fi
// --------------------------------------------------------
using Lexical.Localization.StringFormat;

namespace Lexical.Localization.Inlines
{
    /// <summary>
    /// Inline culture extensions
    /// </summary>
    public static class InlineExtensions
    {
<# foreach(var ci in CultureInfo.GetCultures(CultureTypes.AllCultures & ~CultureTypes.NeutralCultures)) { 
        // Skip "" 
        if (ci.Name == "") continue;

        // Get Region
        RegionInfo r = null; try { r = new RegionInfo(ci.Name); } catch (Exception) { }

        // Make language code "[language]-[region]"
        //string code = r == null ? ci.TwoLetterISOLanguageName : ci.TwoLetterISOLanguageName + "-" + r.TwoLetterISORegionName;

        // Make language code "[language]"
        if (ci.Name.Contains("-")) continue;
        string code = ci.TwoLetterISOLanguageName;

        // Add only once
        if (!visited.Add(code)) continue;

        // Make function name
        string funcName = code.Replace("-", "_");
        if (funcName == "as") funcName = "_as";
        if (funcName == "is") funcName = "_is";

        string name = ci.EnglishName;
#>
        /// <summary>
        /// Add inlined <#= name #> language string.
        /// </summary>
        /// <param name="line">key to add string to</param>
        /// <param name="text">language string</param>
        /// <returns>new key</returns>
        public static ILine <#= funcName #>(this ILine line, string text) => line.InlineCulture("<#= code #>", text);

        /// <summary>
        /// Add inlined <#= name #> language string.
        /// </summary>
        /// <param name="line">key to add string to</param>
        /// <param name="text">language string</param>
        /// <returns>new key</returns>
        public static ILine <#= funcName #>(this ILine line, IFormatString text) => line.InlineCulture("<#= code #>", text);
        
<# } #>

    }
}
